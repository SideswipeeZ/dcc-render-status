'''
    Tizen App (VER:1.0.0)
    Created by Bilal Malik.
    Contact:echopraxiavfx@gmail.com
    
    This allows the writing of parameters to file for the tizen tornado server.
    Currently in development.
    
    Code Partially Generated by PYQT-UI Generator Also on my Github.
'''
import os, sys, re
import pymel.core as pm
#Location of Assets
app_location = os.path.join("PATH_HERE")
echo_file = os.path.join(app_location + "\Assoc")
#Add Path to Qt Module
sys.path.insert(0, os.path.join(app_location + "\Assets"))

#Qt Import Block 
from Qt import QtCore, QtWidgets, QtCompat , QtGui
from Qt.QtWidgets import QFileDialog

#global Vars
fType = ""
wVars = ""

#Class Creation QT
class Tizn(QtWidgets.QMainWindow):
    def writeToFile(self):
        global wVars
        if fType == 'arnold':
            tarFile = os.path.join(echo_file + "\Maya_arnold.echo")
        elif fType == 'Redshift_ROP':
            tarFile = os.path.join(echo_file + "\Maya_redshift.echo")
            
        if os.path.exists(tarFile) == True:
            wF = open(tarFile,"w")
            wF.write(wVars)
            wF.close()
            self.resetAll()
            self.mw.lbl_fileType.setText("FILE WRITTEN TO DISK")
    
    def frange(self):
        val = self.mw.frange_box.value()
        self.mw.lbl_w_frange.setText("Frame Range: " + str(val))
        global wVars
        wVars = wVars + str(val)
        if val > 0:
            self.mw.bttn_write.setEnabled(True)

    def openFile(self,fileType):
        global fType
        if fileType == 'arnold':
            tarFile = os.path.join(echo_file + "\Maya_arnold.echo")
            fType = 'arnold'
        elif fileType == 'Redshift_ROP':
            tarFile = os.path.join(echo_file + "\Maya_redshift.echo")
            fType = 'Redshift_ROP'
            
        if os.path.exists(tarFile) == True:
            rF = open(tarFile,"r")
            content = rF.read()
            if content != "":
                return content
            else:
                return "NEW_FILE"
        else:
            createFile = open(tarFile,"w")
            createFile.write("Maya?ROP?L:\ExoRec\tstR\file_$F.png?file_$F.png?240.0")
            createFile.close()
            ret = "NEW_FILE"
            return ret
            
    
    def getParm(self,flag,ropver):
        my_window.resize(360,680)
        
        if ropver == 'arnold':
            fStat = self.openFile('arnold')
        elif ropver == 'Redshift_ROP':
            fStat = self.openFile('Redshift_ROP')
        
        if fStat != "NEW_FILE":
            splitArgs = fStat.split("?")
            self.mw.lbl_r_rop.setText("ROP: " + splitArgs[1])
            self.mw.lbl_r_loc.setText("Location: " + splitArgs[2])
            self.mw.lbl_r_name.setText("Name: " + splitArgs[3])
            self.mw.lbl_r_frange.setText("Frame Range: " + splitArgs[4])

            if ropver == 'arnold':
                self.mw.lbl_w_rop.setText("ROP: "+"arnold")
                wRop = 'arnold' 
            else:
                self.mw.lbl_w_rop.setText("ROP: "+ "redshift")
                wRop = 'redshift'
            fi = pm.renderSettings(fullPath=True, firstImageName=True, imageGenericName=True)
            locA = os.path.dirname(fi[0])
            wName = fi[1]
            #%4n.%e
            reName = re.sub("%.n","$F",wName)
            reName = re.sub("%e","*",reName)
            locB = os.path.join(locA + "/" +reName)
            self.mw.lbl_w_loc.setText("Location: "+ locB)
            self.mw.lbl_w_name.setText("Name: " + reName)
            self.mw.bttn_lock.setEnabled(True)
            global wVars
            wVars = "Maya?" + wRop + "?" + locB + "?" + reName + "?" #Add missing frame range
            
            

        else:
            self.mw.lbl_fileType.setText("File Did not exist so it was created.")
            self.resetAll()

    
    def __init__(self, parent=None):
        super(Tizn, self).__init__(parent, QtCore.Qt.WindowStaysOnTopHint)
        #File Interface File goes here
        file_interface = os.path.join(app_location+"\Assets\Tizen_Conn_V1_Maya.ui")
        self.mw = QtCompat.loadUi(file_interface)
        self.setCentralWidget(self.mw)
        #Set Window Title Here
        self.setWindowTitle("Tizen Connector 1.0.0 (Maya)")

                
        #Pixmap
        header = os.path.join(app_location+"\Assets\DDC_HEADER.png")
        pixmap = QtGui.QPixmap(header)
        self.mw.lbl_Header.setPixmap(pixmap)
        header2 = os.path.join(app_location+"\Assets\Tizen_header.png")
        pixmap2 = QtGui.QPixmap(header2)
        self.mw.lbl_headtext.setPixmap(pixmap2)  
        
                        
        #Button Assignment
        #self.mw.bttn_write.clicked.connect()
        self.mw.bttn_reset.clicked.connect(self.resetAll)
        self.mw.bttn_write.clicked.connect(self.writeToFile)
        self.mw.bttn_help.clicked.connect(lambda: self.changePage(0))
        self.mw.bttn_returnMain.clicked.connect(lambda: self.changePage(1))
            #Read Buttons
        self.mw.bttn_readArnold.clicked.connect(lambda: self.getParm(0,'arnold'))
        self.mw.bttn_readRedshift.clicked.connect(lambda: self.getParm(0,'Redshift_ROP'))
        self.mw.bttn_lock.clicked.connect(self.frange)
        self.mw.bttn_lock.setEnabled(False)
        
        #Params
        self.mw.bttn_write.setEnabled(False)
        self.mw.lbl_w_loc.setWordWrap(True)
        self.mw.lbl_r_loc.setWordWrap(True)
        
    
    def changePage(self, indexV):
        if indexV == 0:
            self.resetAll()
            self.mw.stackWidget.setCurrentIndex(0)
        elif indexV == 1:
            self.mw.stackWidget.setCurrentIndex(1)
        
    def resetAll(self):
        #Reset Vars
        my_window.resize(360,460)
        wVars = ""
        fType = ""
        #Reset Labels
        self.mw.lbl_fileType.setText("Reading: ")
            #Read Labels
        self.mw.lbl_r_rop.setText("ROP: ")
        self.mw.lbl_r_loc.setText("Location: ")
        self.mw.lbl_r_name.setText("Name: ")
        self.mw.lbl_r_frange.setText("Frame Range: ")
            #Write Labels
        self.mw.lbl_w_rop.setText("ROP: ")
        self.mw.lbl_w_loc.setText("Location: ")
        self.mw.lbl_w_name.setText("Name: ")
        self.mw.lbl_w_frange.setText("Frame Range: ")        
        #Buttons
        self.mw.frange_box.setValue(1)
        self.mw.bttn_write.setEnabled(False)
        self.mw.bttn_lock.setEnabled(False)
        
        


        

#Create Interface Shelf.
try:
    my_window.close()
except:
    pass
my_window = Tizn()
my_window.resize(360,460) #720
my_window.show() 
